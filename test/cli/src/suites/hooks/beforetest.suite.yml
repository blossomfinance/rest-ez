meta:
  name: Before test suite
configuration:
  scheme: http
  host: 127.0.0.1
  port: 3027
specs:
  - name: before test hook inline sync funtion
    before_test:
      run_type: inline
      inline:
        args:
          - foo
          - bar
          - [1, 2, 3]
        function: !!js/function >
          function(arg1, arg2, arg3) {
              var keys = Object.keys(this);
              if (keys.length !== 4)
                  throw new Error("before test context doesn't have expected keys");

              this.test.query_params = { param1: 'value2' };

              if (arg1 !== 'foo') {
                  throw new Error('Unexpected argument 1');
              }
              if (arg2 !== 'bar') {
                  throw new Error('Unexpected argument 2');
              }
              if (!Array.isArray(arg3) || 3 !== arg3.length) {
                  throw new Error('Unexpected argument 3');
              }
          }
    request: &default_request
      path: /echoQueryParams
      method: get
    response: &default_response
      json_data:
        - path: $
          value:
            param1: value2

  - name: before test hook inline async funtion
    before_test:
      run_type: inline
      inline:
        function: !js/asyncFunction >
          function() {
            this.test.query_params = { param1: 'value2' };
          }
    request: *default_request
    response: *default_response

  - name: before test hook module sync funtion
    before_test:
      run_type: module
      module:
        module_path: modules/before_test.js
        function_name: beforeTestSyncSuccess
    request: *default_request
    response: *default_response

  - name: before test hook module async funtion
    before_test:
      run_type: module
      module:
        module_path: modules/before_test.js
        function_name: beforeTestAsyncSuccess
    request: *default_request
    response: *default_response

  - name: before test hook inline sync funtion throws error - should fail
    before_test:
      run_type: inline
      inline:
        function: !!js/function >
          function() {
            this.test.query_params = { param1: 'value2' };
            throw new Error('error thrown in before test hook');
          }
    request: *default_request
    response: *default_response

  - name: before test hook inline async funtion throws error - should fail
    before_test:
      run_type: inline
      inline:
        function: !js/asyncFunction >
          function() {
            this.test.query_params = { param1: 'value2' };
            throw new Error('error thrown in before test hook');
          }
    request: *default_request
    response: *default_response

  - name: before test hook module sync funtion throws error - should fail
    before_test:
      run_type: module
      module:
        module_path: modules/before_test.js
        function_name: beforeTestSyncError
    request: *default_request
    response: *default_response

  - name: before test hook module async funtion throws error - should fail
    before_test:
      run_type: module
      module:
        module_path: modules/before_test.js
        function_name: beforeTestAsyncError
    request: *default_request
    response: *default_response

  - name: before test hook module async funtion rejected promise - should fail
    before_test:
      run_type: module
      module:
        module_path: modules/before_test.js
        function_name: beforeTestAsyncRejectedPromise
    request: *default_request
    response: *default_response
